------------------------------------------------------------------------------
* Basics of LiteBag code

    The Blizzard code for bags is in:
        FrameXML/ContainerFrame.xml
        FrameXML/ContainerFrame.lua
        FrameXML/BankFrame.xml
        FrameXML/BankFrame.lua

    See https://github.com/gethe/wow-ui-source/blob/live/Interface/FrameXML

    Their code was largely rewritten for Dragonflight (10.0) and introduced
    the combined bags frame, but unfortunately not a combined bank frame.

    I feel like their code is made way too complicated by handling both the
    individual bag frames and the combined frame. For commonality they have
    a separate ContainerFrameSettingsManager that is called from a lot of
    the bag code, and a separate BagUpdaterFrame that's responsible for
    refreshing the layouts etc of frames if they change.

    All of that is kind of OK. What's not is their Token and Money frame
    handlers which are a bit of a mess.

    The Blizzard code is still very bag-focused, most of the bag/bank-related
    API calls take a (bag, slot) pair as the identifier, and the combined bag
    frame just leaves the bags existing and steals all the buttons. There is
    a global inventory slot ID but it's almost unused.

    The Blizzard bags/banks are holders for the item buttons, which are either:
        * ContainerFrameItemButtonTemplate
        * BankItemButtonGenericTemplate
        * ReagentBankItemButtonGenericTemplate
    which all inherit from ItemButtonTemplate

    LiteBag is pretty simple, all of the complexity is in the detail:

        LiteBagBagButtonTemplate is a button to hold the actual bag iself,
        where you drag a new bag on when you buy one.

        LiteBagContainerPanelTemplate is a panel of ContainerFrameItemButton
        buttons and the code for arranging them according to various settings.
        It's assigned some bag IDs, listens for the bag events, and does all
        the updating of its ItemButtons.

        LiteBagFrameTemplate is a portraitframe set up to hold the panel
        and the bag buttons. It's able to be resized by dragging. It listens
        to the relevant events to open and close itself. It also supports
        tabbing to do the reagent bank.

        ReagentBankPanel is a wrapper for the Blizzard Reagent Bank, to handle
        its events, which are normally done by the Blizzard BankFrame.

        LiteBagBank and LiteBagBackpack define the bank and backpack/bags
        frames respectively.

        In Core.lua are the various functions to replace the Blizzard standard
        bag and bank UI with ours.


------------------------------------------------------------------------------
* Hello programmers!

    If you are ever doing any work on LiteBag, read the git log comments.
    Everything intelligent I've ever written is in there. Unfortunately
    so is every dumb thing I've ever written. You win some, you lose some.


------------------------------------------------------------------------------
* Tag-fu

    List tags;
        git tag
    Tag a release:
        git tag -a -m 'Tagging x.y.z' x.y.z
    Tag a beta:
        git tag -a -m 'Tagging x.y.zbeta' x.y.zbeta
    Automatically fetch tags:
        git config remote.origin.tagopt --tags
    Manually get tags:
        git pull --tags
    Push tags:
        git push --tags
    Deleting a tag (and at remote):
        git tag -d x.y.z
        git push origin :refs/tags/x.y.z
            or
        git push --delete origin x.y.z


------------------------------------------------------------------------------
* Branch-fu

    List branches including at curseforge:
        git branch -a
    Get a branch from curseforge:
        git checkout --track origin/branchname
    Create a new branch:
        git checkout -b branchname
    Merge master changes into your branch:
        git checkout branchname
        git merge master
    Merge another branch into master:
        git checkout master
        git merge branchname
    Delete a branch when you're done with it:
        git branch -d branchname
        git push origin :branchname


------------------------------------------------------------------------------
* Git reset to curseforge version

    git fetch origin
    git reset --hard origin/main


------------------------------------------------------------------------------
* Diff since last release:

    git diff <previoustag>

    All hail git.


------------------------------------------------------------------------------
* XML syntax check

    xmllint --noout *.xml


------------------------------------------------------------------------------
* TODO List

    Switch the Token stuff to using the CURRENCY_DISPLAY_UPDATE event?
    Would need to call TokenFrame_LoadUI() somewhere before we have
    access to MAX_WATCHED_TOKENS.  It might be easier to leave it.

    What to do with the Token display if we allow resizing.

    Attach the bag buttons somewhere sensible.

    What to do with the specialist bag types?


------------------------------------------------------------------------------
* Frame event debugging

    -- Figure out exactly where InCombatLockdown() begins and also
    -- where we first know the bag sizes.

    MyDebugFrame = CreateFrame("Frame", UIParent)
    MyDebugFrame.eventList = { }
    MyDebugFrame:SetScript('OnEvent', function (self, event, ...)
            tinsert(self.eventList, {
                                        time(),
                                        event,
                                        InCombatLockdown(),
                                        GetContainerNumSlots(1)
                                    })
            if event == "PLAYER_ALIVE" then self:UnregisterAllEvents() end
        end)
    MyDebugFrame:RegisterAllEvents()

    /dump MyDebugFrame.eventList

